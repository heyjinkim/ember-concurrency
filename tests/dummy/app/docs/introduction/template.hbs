<h3>Introduction</h3>

<p>
  <strong>ember-concurrency</strong> is a small but powerful library that supplements
  Ember's existing tools and conventions for handling concurrency and
  asynchrony.
</p>

<p>
  For a high-level view of what ember-concurrency can do for your app,
  check out this article:
  <a href="https://medium.com/@machty/ember-concurrency-the-solution-to-so-many-problems-you-never-knew-you-had-cce6d7731ba9#.e6r0iv44u">
    ember-concurrency: the solution to so many problems you never knew you had</a>.
  If you'd prefer a video introduction to the ideas and concepts behind ember-concurrency,
  check out the video below from the
  <a href="https://twitter.com/EmberMeetup">Ember Global Meetup</a>
  (<a href="http://alexmatchneer.com/ember-concurrency-global-meetup-slides/">slides available here</a>):
</p>

<p style="text-align: center">
  <iframe src="https://player.vimeo.com/video/162329769" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
</p>

<p>
  EmberMap also has a paid course teaching the library
  <a href="https://embermap.com/topics/ember-concurrency">here</a>.
</p>

<h4>Key Ideas / Goals</h4>

<ul>
  <li>It should be easy to write <strong>cancelable</strong> asynchronous operations (this is hard to do with Promises).</li>
  <li>It should be easy to prevent two or more async operations from happening at the same time (this is hard to do with Promises and Observables).</li>
  <li><strong>Minimize boilerplate</strong> and <strong>maximize implicit state</strong> so that common UI tasks like
      displaying loading spinners or styling inactive buttons require as little code as possible.
  </li>
  <li>The API should feel familiar and "at home" for Ember developers.</li>
</ul>

<h3>Tasks</h3>

<p>
  <strong>ember-concurrency</strong> enables you to write <strong>Tasks</strong>, which are asynchronous,
  cancelable operations that are bound to the lifetime of the object they live on,
  which means when the host object is destroyed (e.g. a component is unrendered),
  the task is automatically canceled. Here is an example of a task:
</p>

{{intro-task}}

{{code-snippet name="intro-task.js"}}

<p>
  The example above demonstrates a few things:
</p>

<ul>
  <li>
    Tasks are implemented using
    <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">ES6 Generator Function syntax</a>
    and the <code>yield</code> keyword
  </li>
  <li>
    This syntax enables writing async code in a synchronous looking manner
  </li>
  <li>
    It is trivial to restart a task without having to manually cancel the previous task.
  </li>
</ul>

<h3>Without Tasks</h3>

<p>
  If you were to rewrite the above example without using tasks,
  it would look something like this:
</p>

{{intro-task-oldschool}}

{{code-snippet name="intro-task-oldschool.js"}}

<p>
  As you can see, it takes a surprising amount of code to handle
  all of the corner cases when dealing with async code:
</p>

<ul>
  <li>
    You have to stop the currently running operation before starting a new
    operation in its place; in other words, you need to constrain concurrency
  </li>
  <li>
    You have to stop the operation when the parent object is destroyed
  </li>
  <li>
    You have to break down each step of the asynchronous operation into
    individually cancelable units
  </li>
</ul>
